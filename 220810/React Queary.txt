useQuery hook

const { isLoading, data } = useQuery(["allCoins"], fetchCoins);

export function fetchCoins() {
  return fetch("https://api.coinpaprika.com/v1/coins").then((response) =>
    response.json()
  );
}

내 fetcher 함수를 부름 (ex. fetchCoins)
fetcher함수가 loading 중이라면 react query는 알려줌(ex, isLoading 여기에)
fetcher함수가 끝나면 react query는 json을 data에 넣어줌

홈화면에서 코인 화면으로 넘어갔다가
다시 홈화면으로 가면 loading 화면이 보였는데
보이지 않은 이유는 react query가 데이터를 캐시에 저장해두기 때문

fetcher 함수에 argument가 필요한 경우
export function fetchCoininfo(coinId: string | undefined) {
  return fetch(`${BASE_URL}/coins/${coinId}`).then((response) =>
    response.json()
  );
}
() => fetchCoininfo(coinId)
-> 이런식으로 익명함수 하나를 만들어서 return 해줌

여러가지의 query를 가지게 되면 useQuery의 return 값이 같아지게 됨
const { isLoading: infoLoading, data: infoData }
const { isLoading: tickersLoading, data: tickersData }
-> 이런식으로 이름을 다르게 지정해줬다
(object의 property를 가져온 다음 syntax를 이용해서 이름을 바꿈)


장점!
1. fetcher 함수를 만들 수 있음
2. 캐싱 매커니즘 가짐
